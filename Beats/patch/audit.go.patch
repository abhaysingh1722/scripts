diff --git a/audit.go b/audit.go
index 69f8c0e..4f191ab 100644
--- a/audit.go
+++ b/audit.go
@@ -26,10 +26,12 @@ import (
        "unsafe"

        "github.com/pkg/errors"
-
+       "github.com/elastic/go-libaudit/sys"
        "github.com/elastic/go-libaudit/auparse"
 )
-
+var (
+       byteOrder = sys.GetEndian()
+ )
 const (
        // AuditMessageMaxLength is the maximum length of an audit message (data
        // portion of a NetlinkMessage).
@@ -488,7 +490,7 @@ func parseNetlinkAuditMessage(buf []byte) ([]syscall.NetlinkMessage, error) {

        r := bytes.NewReader(buf)
        m := syscall.NetlinkMessage{}
-       if err := binary.Read(r, binary.LittleEndian, &m.Header); err != nil {
+       if err := binary.Read(r, byteOrder, &m.Header); err != nil {
                return nil, err
        }
        m.Data = buf[syscall.NLMSG_HDRLEN:]
@@ -533,7 +535,7 @@ type AuditStatus struct {
 func (s AuditStatus) toWireFormat() []byte {
        buf := bytes.NewBuffer(make([]byte, sizeofAuditStatus))
        buf.Reset()
-       if err := binary.Write(buf, binary.LittleEndian, s); err != nil {
+       if err := binary.Write(buf, byteOrder, s); err != nil {
                // This never returns an error.
                panic(err)
        }
@@ -568,7 +570,7 @@ func (s *AuditStatus) fromWireFormat(buf []byte) error {
                        return nil
                }

-               if err := binary.Read(r, binary.LittleEndian, f); err != nil {
+               if err := binary.Read(r, byteOrder, f); err != nil {
                        return err
                }
        }
